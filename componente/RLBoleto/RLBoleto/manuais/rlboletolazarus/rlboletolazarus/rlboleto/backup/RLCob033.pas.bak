unit RLCob033;

{$mode objfpc}{$H+}

{$HINTS OFF}
{$WARNINGS OFF}

interface

uses
   classes, SysUtils, RLBoleto , DateUtils
  {$IFDEF VER150}
     , Variants, MaskUtils, contnrs, DateUtils
  {{$ELSE}}
   {$IFDEF VER140}
      , Variants, MaskUtils, contnrs, DateUtils
   {{$ELSE}}
      {$IFDEF VER130}
         , Mask, contnrs
      {{$ELSE}
         , Mask}
      {$ENDIF}
   {$ENDIF}
  {$ENDIF}
  {$IFDEF VER185} //Delphi 2007
  , Variants, DateUtils
  {$ENDIF}
   ;

const
  CodigoBanco = '033';
  NomeBanco = 'BANESPA'; {Banespa}
  Imagem = 12;

type
  TRLBanco033 = class(TPersistent)
{$IFNDEF VER120}
    function VerificaOcorrenciaOriginal(sOcorrenciaOriginal: String; aLayoutArquivo: TLayoutArquivo): String;
    function VerificaMotivoRejeicaoComando(sOcorrenciaOriginal: String; sMotivoRejeicaoComando: String; sLayoutArquivo: TLayoutArquivo): String;
    function GerarRemessaCNAB240(var ACobranca: TRLBRemessa; var Remessa: TStringList) : boolean;
    function GerarRemessaCNAB400(var ACobranca: TRLBRemessa; var Remessa: TStringList) : boolean;
    function LerRetornoCNAB240(var ACobranca: TRLBRemessa; Retorno: TStringList) : boolean;
//      function LerRetornoCNAB400(var ACobranca: TgbCobranca; Retorno: TStringList) : boolean;
{$ENDIF}
  published
    function  GetNomeBanco   : string; {Retorna o nome do banco}
    function  GetImagem      : byte; {Retorna o codigo para imagem do banco}
    function  GetCampoLivreCodigoBarra(ATitulo: TRLBTitulo) : string; {Retorna o conteúdo da parte variável do código de barras}
    function  CalcularDigitoNossoNumero(ATitulo: TRLBTitulo) : string; {Calcula o dígito do NossoNumero, conforme critérios definidos por cada banco}
    procedure FormatarBoleto(ATitulo: TRLBTitulo; var AAgenciaCodigoCedente, ANossoNumero, ACarteira, AEspecieDocumento: string); {Define o formato como alguns valores serão apresentados no boleto }
{$IFNDEF VER120}
    function  LerRetorno(var ACobranca: TRLBRemessa; Retorno: TStringList) : boolean; {Lê o arquivo retorno recebido do banco}
    function  GerarRemessa(var ACobranca: TRLBRemessa; var Remessa: TStringList) : boolean; {Gerar arquivo remessa para enviar ao banco}
{$ENDIF}
  end;

implementation

function TRLBanco033.GetNomeBanco : String;
begin
  Result := NomeBanco;
end;

function TRLBanco033.GetImagem : Byte;
begin
  Result := Imagem;
end;

function TRLBanco033.CalcularDigitoNossoNumero(ATitulo: TRLBTitulo) : String;
var
  ANossoNumero,
  ADigitoNossoNumero: String;
begin
  Result := '0';
  ANossoNumero := Formatar(ATitulo.NossoNumero,7,false,'0');
  ADigitoNossoNumero := Modulo11(ANossoNumero,9);
  Result := ADigitoNossoNumero;
end;

function TRLBanco033.GetCampoLivreCodigoBarra(ATitulo: TRLBTitulo) : string;
var
  ANossoNumero,
  ACodigoAgencia,
  ACodigoCedente: string;
begin
  with ATitulo do
  begin
    ACodigoAgencia := Formatar(Cedente.ContaBancaria.CodigoAgencia,3,false,'0');
    ACodigoCedente := Formatar(Cedente.CodigoCedente,7,false,'0');
    ANossoNumero := Formatar(NossoNumero,12,false,'0')+DigitoNossoNumero;
  end;
  Result := '9' + ACodigoCedente + ANossoNumero + '0' + ATitulo.Carteira;
end;

procedure TRLBanco033.FormatarBoleto(ATitulo: TRLBTitulo; var AAgenciaCodigoCedente, ANossoNumero, ACarteira, AEspecieDocumento: string);
begin
  with ATitulo do
  begin
    AAgenciaCodigoCedente := Formatar(Cedente.ContaBancaria.CodigoAgencia,3,false,'0') + '-' +
                             Cedente.ContaBancaria.DigitoAgencia + '/' +
                             Formatar(Cedente.CodigoCedente,7,false,'0');
    ANossoNumero := Formatar(NossoNumero,12,false,'0') + '-' + DigitoNossoNumero;
    ACarteira := Formatar(Carteira,3);
    AEspecieDocumento := '';
  end;
end;

{$IFNDEF VER120}

function TRLBanco033.GerarRemessaCNAB400(var ACobranca: TRLBRemessa; var Remessa: TStringList) : boolean;
var
  ACedenteTipoInscricao, ASacadoTipoInscricao, aTitulosTipoOcorrencia,
  aTitulosEspecieDocumento, aTitulosAceite, Registro : String;
  cTotalTitulos: Currency;
  NumeroRegistro : integer;
begin
  NumeroRegistro := 0;
  Remessa.Clear;
  with ACobranca do
  begin

      { GERAR REGISTRO-HEADER DA REMESSA }

      Remessa.Add('0'+ // IDENT.DO REGISTRO
                  '1'+ // IDENT.DO ARQUIVO DE REMESSA
                  'REMESSA'+ // IDENT. POR EXTENSO REMESSA
                  '01'+ // IDENT. DO TIPO DE SERVIÇO
                  Formatar('COBRANCA',15)+ // IDENT.POR EXTENSO TIPO SERVIÇO
                  Formatar('0',11)+ // USO DO BANCO
                  Formatar('',09)+
                  Formatar(Titulos[NumeroRegistro].Cedente.Nome,30,true,' ')+ // NOME DA EMPRESA POR EXTENSO
                  Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0')+ // BANCO ENCARREGADO DA COBRANÇA
                  Formatar('BANESPA',15,true,' ')+ // NOME DO BANCO POR EXTENSO
                  FormatDateTime('ddmmyy',Titulos[NumeroRegistro].DataProcessamento)+ // DATA DA GRAVAÇÃO DO ARQUIVO
                  Formatar('01600',5)+ // DENSIDADE DE GRAVAÇÃO
                  Formatar('BPI',3)+ // UNIDADE DENSIDADE GRAVAÇÃO
                  Formatar('',286)+ // USO DO BANCO
                  '000001'); // NUMERO SEQUENCIAL REGISTRO


      { GERAR TODOS OS REGISTROS DETALHE DA REMESSA}
      while NumeroRegistro <= (Titulos.Count - 1) do
      begin
         if Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0') <> Formatar(CodigoBanco,3,false,'0') then
            Raise Exception.CreateFmt('Titulo não pertence ao banco %s - %s',[CodigoBanco,NomeBanco]);
         case Titulos[NumeroRegistro].Cedente.TipoInscricao of
            tiPessoaFisica  : ACedenteTipoInscricao := '01';
            tiPessoaJuridica: ACedenteTipoInscricao := '02';
            tiOutro         : ACedenteTipoInscricao := '03';
         end;
         case Titulos[NumeroRegistro].Sacado.TipoInscricao of
            tiPessoaFisica  : ASacadoTipoInscricao := '01';
            tiPessoaJuridica: ASacadoTipoInscricao := '02';
            tiOutro         : ASacadoTipoInscricao := '03';
         end;

         case Titulos[NumeroRegistro].TipoOcorrencia of
            toRemessaRegistrar  : ATitulosTipoOcorrencia := '01';
            toRemessaBaixar  : ATitulosTipoOcorrencia := '02';
            toRemessaConcederAbatimento  : ATitulosTipoOcorrencia := '04';
            toRemessaCancelarAbatimento  : ATitulosTipoOcorrencia := '05';
            toRemessaAlterarVencimento  : ATitulosTipoOcorrencia := '06';
            toRemessaProtestar  : ATitulosTipoOcorrencia := '09';
//            toRemessaSustarProtestoBaixarTitulo: ATitulosTipoOcorrencia := '17';
//            toRemessaAlterarValorTitulo: ATitulosTipoOcorrencia := '19';
//            toRemessaAlterarOutrosDados: ATitulosTipoOcorrencia := '31';
         end;

         case Titulos[NumeroRegistro].EspecieDocumento of
              edDuplicataMercantil: aTitulosEspecieDocumento := '01';
              edOutros: aTitulosEspecieDocumento := '07';
         end;

         case Titulos[NumeroRegistro].AceiteDocumento of
             adNao: aTitulosAceite:='N';
             adSim: aTitulosAceite:='A';
         end;



         Registro := '1'; //  IDENT. DO REGISTRO
         Registro := Registro + Formatar(ACedenteTipoInscricao,2,false,'0'); // IDENT.TIPO INSCR.EMPRESA
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.NumeroCPFCGC,25,false,' '); // NUMERO DO CGC DA EMPRESA
         Registro := Registro + Formatar('0',10,False,'0'); // USO DO BANCO
         Registro := Registro + Formatar('',35); // USO DO BANCO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.CodigoAgencia,2,false,'0'); //AG ONDE O CLIENTE MANTÉM C/C
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoAgencia,1,false,'0'); //DIGITO AG
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.NumeroConta,6,false,'0'); // C/C PARA CRÉDITO DA COBRANÇA
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoConta,1); //DIGITO C/C
         Registro := Registro + Formatar(Titulos[NumeroRegistro].SeuNumero,25,true,' '); // IDENT. DO TITULO NA EMPRESA
         Registro := Registro + Formatar('',12); // USO DO BANCO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].NossoNumero,8,True,' '); // IDENT. DO TITULO NO BANCO COM DIG VERIFICADOR
         Registro := Registro + Formatar('',25); // USO DO BANCO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Carteira,1); // CODIGO DA CARTEIRA
         Registro := Registro + Formatar(aTitulosTipoOcorrencia,2,false,'0'); // IDENT. DA TRANSACAO(OCORRENCIA)
         Registro := Registro + Formatar(Titulos[NumeroRegistro].NumeroDocumento,10); // NUMERO DA DUPLICATA, ETC...
         Registro := Registro + FormatDateTime('ddmmyy',Titulos[NumeroRegistro].DataVencimento); // DATA DE VENCIMENTO DO TITULO
         Registro := Registro + FormatCurr('0000000000000',Titulos[NumeroRegistro].ValorDocumento * 100); // VALOR NOMINAL DO TITULO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0'); // BANCO ENCARREGADO DA COBRANÇA
         Registro := Registro + '00000';
         Registro := Registro + Formatar(aTitulosEspecieDocumento,2,false,'0'); // ESPÉCIE DO TITULO
         Registro := Registro + Formatar(aTitulosAceite,1); // IDENT. DE ACEITE DO TITULO
         Registro := Registro + FormatDateTime('ddmmyy',Titulos[NumeroRegistro].DataDocumento); // DATA DE EMISSAO DO TITULO
         Registro := Registro + '00'; // Primeira Instrucao
         Registro := Registro + '00'; // Segunda Instrucao
         Registro := Registro + FormatCurr('0000000000000',Titulos[NumeroRegistro].ValorMoraJuros * 100); // VALOR DE MORA A SER COBRADO POR DIA DE ATRASO
         if Titulos[NumeroRegistro].DataDesconto=0 then begin
            Registro := Registro + Formatar('0',6,False,'0'); // DATA LIMITE P/ CONCESSÃO DESC.
         end else begin
            Registro := Registro + FormatDateTime('ddmmyy',Titulos[NumeroRegistro].DataDesconto); // DATA LIMITE P/ CONCESSÃO DESC.
         end;
         Registro := Registro + FormatCurr('0000000000000',Titulos[NumeroRegistro].ValorDesconto * 100); // VALOR DESCONTO A SER CONCEDIDO
         Registro := Registro + FormatCurr('0000000000000',Titulos[NumeroRegistro].ValorIOF * 100); // VALOR DE IOF
         Registro := Registro + FormatCurr('0000000000000',Titulos[NumeroRegistro].ValorAbatimento * 100); // VALOR DO ABATIMENTO

         Registro := Registro + Formatar(ASacadoTipoInscricao,2,false,'0'); // IDENT. TIPO INSCRIÇÃO DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.NumeroCPFCGC,14,false,'0'); // CGC/CPF DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Nome,40,true,' '); // NOME DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Rua+
                                ' '+Titulos[NumeroRegistro].Sacado.Endereco.Numero+
                                ' '+Titulos[NumeroRegistro].Sacado.Endereco.Complemento,40); // ENDEREÇO DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Bairro,12); // BAIRRO DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.CEP,8,true,'0'); // CEP DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Cidade,15,true); // CIDADE DO SACADO
         Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Estado,2,false); // ENDEREÇO DO SACADO
         Registro := Registro + Formatar('',40,true,' '); // NOME DO SACADOR/AVALISTA
         Registro := Registro + ' '; // BLOQUETE (NAO USO)
         Registro := Registro + '  '; // RESERVADO
         Registro := Registro + Formatar(IntToStr(NumeroRegistro+2),6,false,'0'); // NUMERO SEQUENCIAL DO REGISTRO

         Remessa.Add(Registro);
         NumeroRegistro := NumeroRegistro + 1;
      end;
      { GERAR REGISTRO TRAILER DA REMESSA }

      Remessa.Add('9'+ // IDENT. DO REGISTRO
                  Formatar(' ',393,False,' ')+ // USO DO BANCO
                  Formatar(IntToStr(NumeroRegistro+2),6,false,'0')); // QUANTIDADE TOTAL DE REGISTROS

   end;

   Result := TRUE;
end;



function TRLBanco033.GerarRemessa(var ACobranca: TRLBRemessa; var Remessa: TStringList) : boolean;
begin
  ACobranca.LayoutArquivo := laCNAB240;
  case ACobranca.LayoutArquivo of
    laCNAB240 : Result := GerarRemessaCNAB240(ACobranca, Remessa);
    laCNAB400 : Result := GerarRemessaCNAB400(ACobranca, Remessa);
  end;
end;

function TRLBanco033.LerRetorno(var ACobranca: TRLBRemessa; Retorno: TStringList) : boolean;
var
  ACodigoBanco,
  ANomeCedente,
  ATipoInscricao : string;
  NumeroRegistro : integer;
  ATitulo : TRLBTitulo;
begin
  NumeroRegistro := 0;
  ATitulo := TRLBTitulo.Create(nil);
  try
    with ACobranca do
    begin
      Titulos.Clear; {Zera o conjunto de títulos, antes de incluir os títulos do arquivo retorno}
      if Retorno.Count <= 0 then
        Raise Exception.Create('O retorno está vazio. Não há dados para processar');

      case length(Retorno[0]) of
        240 :
             begin
               LayoutArquivo := laCNAB240;
               Result := LerRetornoCNAB240(ACobranca, Retorno);
             end;
         else
         begin
           LayoutArquivo := laOutro;
           Raise Exception.CreateFmt('Tamanho de registro inválido: %d',[length(Retorno[0])]);
         end;
       end;
    end;
    ATitulo.Free;
    Result := TRUE
  except
    ATitulo.Free;
    Result := FALSE;
    Raise;
  end;
end;

{$ENDIF}

function TRLBanco033.GerarRemessaCNAB240(var ACobranca: TRLBRemessa;  var Remessa: TStringList): boolean;
var
  ACedenteTipoInscricao, ASacadoTipoInscricao,
  Registro : string;
  NumeroRegistro, NumeroLote : integer;
begin
  Result := FALSE;
  NumeroRegistro := 0;
  NumeroLote := 1;
  Registro := '';
  Remessa.Clear;

  if ACobranca.Titulos.Count < 1 then
    Exception.Create('Não há títulos para gerar remessa');

  with ACobranca do
  begin
    if LayoutArquivo <> laCNAB240 then
      Raise Exception.Create('CNAB240 é o único layout disponível para o banco ' + CodigoBanco + ' - ' + NomeBanco);

    { GERAR REGISTRO-HEADER DO ARQUIVO }
    case Titulos[NumeroRegistro].Cedente.TipoInscricao of
      tiPessoaFisica  : ACedenteTipoInscricao := '1';
      tiPessoaJuridica: ACedenteTipoInscricao := '2';
      tiOutro         : ACedenteTipoInscricao := '3';
    end;

    if Formatar(CodigoBanco,3,false,'0') <> Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0') then
      Raise Exception.CreateFmt('O título (Nosso Número: %s) não pertence ao banco %s (%s)',[Titulos[NumeroRegistro].NossoNumero,CodigoBanco,NomeBanco]);

    Registro := Formatar(CodigoBanco,3,false,'0'); //1 a 3 -Código do banco
    Registro := Registro + '0000'; //4 a 7 -Lote de serviço
    Registro := Registro + '0'; //8 -Tipo de registro - Registro header de arquivo
    Registro := Registro + Formatar('',8); //9 a 16 Uso exclusivo FEBRABAN/CNAB
    Registro := Registro + ACedenteTipoInscricao; //17 - Tipo de inscrição do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.NumeroCPFCGC,15,false,'0'); //18 a 32 -Número de inscrição do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.CodigoAgencia,4,false,'0'); //33 a 36 - Código da agência do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoAgencia,1,false,'0'); //37 - Dígito da agência do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.CodigoCedente,9,false,'0'); //38 a 45 - Codigo do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.DigitoCodigoCedente,1,false,'0'); // 46 - Digito Codigo cedente
    Registro := Registro + Formatar('',25); // 48 a 72 Brancos
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.Nome,30,true,' '); //73 a 102 - Nome do cedente
    Registro := Registro + Formatar('Banco Santander',30,True,' '); // 103-132 nome do banco
    Registro := Registro + Formatar('',10); // 133 a 142 brancos
    Registro := Registro + '1'; // 143 a 143 codigo remessa
    Registro := Registro + FormatDateTime('ddmmyyyy',DataArquivo); //144 a 151 - Data do de geração do arquivo
    Registro := Registro + Formatar('',6);
    Registro := Registro + Formatar(IntToStr(NumeroArquivo),6,false,'0'); //158 a 163 - Número seqüencial do arquivo
    Registro := Registro + '040'; // 164 a 166 - Versao do layout
    Registro := Registro + Formatar('',74); // brancos
    Remessa.Add(Registro);
    Registro := '';

    { GERAR REGISTRO-HEADER DA REMESSA }
    Registro := Formatar(CodigoBanco,3,false,'0'); //1 a 3 -Código do banco
    Registro := Registro + Formatar(IntToStr(NumeroLote),4,false,'0'); //4 a 7 - Número do lote de serviço
    Registro := Registro + '1'; //8 - Tipo do registro - Registro header de lote
    Registro := Registro + 'R'; //9 - Tipo de operação: R (Remessa) ou T (Retorno)
    Registro := Registro + '01'; //10 a 11 - Tipo de serviço: 01 (Cobrança)
    Registro := Registro + Formatar('00',2); //12 a 13 - Uso exclusivo FEBRABAN/CNAB
    Registro := Registro + '030'; //14 a 16 - Número da versão do layout do lote

    Registro := Registro + ' '; //17 - Uso exclusivo FEBRABAN/CNAB
    Registro := Registro + ACedenteTipoInscricao; //18 - Tipo de inscrição do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.NumeroCPFCGC,15,false,'0'); //19 a 33 - Número de inscrição do cedente
    Registro := Registro + Formatar('',20);; //34 a 53 - brancos
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.CodigoAgencia,4,false,'0'); //54 a 57 - Código da agência do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoAgencia,1,false,'0'); //58 - Dígito da agência do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.CodigoCedente,9,false,'0'); //59 a 67 - Codigo do cedente
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.DigitoCodigoCedente,1,false,'0'); // 68 - Digito codigo cedente
    Registro := Registro + Formatar('',5); // 69 a 73 - Brancos
    Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.Nome,30,true,' '); //74 a 103 - Nome do cedente
    Registro := Registro + Formatar(Copy(Titulos[NumeroRegistro].Instrucoes.Text,1,40),40,true,' '); //104 a 143 - Mensagem 1 para todos os boletos do lote
    Registro := Registro + Formatar(Copy(Titulos[NumeroRegistro].Instrucoes.Text,41,80),40,true,' '); //144 a 183 - Mensagem 2 para todos os boletos do lote
    Registro := Registro + Formatar(IntToStr(NumeroArquivo),8,false,'0'); //184 a 191 - Número do arquivo
    Registro := Registro + FormatDateTime('ddmmyyyy',DataArquivo); //192 a 199 - Data de geração do arquivo
    Registro := Registro + Formatar('',41); //200 a 240 - Uso exclusivo FEBRABAN/CNAB
    Remessa.Add(Registro);
    Registro := '';

    { GERAR TODOS OS REGISTROS DETALHE DA REMESSA }
       //*********************** SEGMENTO P ****************************
    while NumeroRegistro <= (Titulos.Count - 1) do
    begin
      if Formatar(CodigoBanco,3,false,'0') <> Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0') then
         Raise Exception.CreateFmt('O título (Nosso Número: %s) não pertence ao banco %s (%s)',[Titulos[NumeroRegistro].NossoNumero,CodigoBanco,NomeBanco]);

      {SEGMENTO P}
      if Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.Banco.Codigo,3,false,'0') <> Formatar(CodigoBanco,3,false,'0') then
         Raise Exception.CreateFmt('Titulo não pertence ao banco %s - %s',[CodigoBanco,NomeBanco]);

      case Titulos[NumeroRegistro].Cedente.TipoInscricao of
         tiPessoaFisica  : ACedenteTipoInscricao := '1';
         tiPessoaJuridica: ACedenteTipoInscricao := '2';
         tiOutro         : ACedenteTipoInscricao := '9';
      end;

      Registro := Formatar(CodigoBanco,3,false,'0'); //1 a 3 - Código do banco
      Registro := Registro + Formatar(IntToStr(NumeroLote),4,false,'0'); //4 a 7 - Número do lote
      Registro := Registro + '3'; //8 - Tipo do registro: Registro detalhe
      Registro := Registro + Formatar(IntToStr(2*NumeroRegistro+1),5,false,'0'); //9 a 13 - Número seqüencial do registro no lote - Cada título tem 2 registros (P e Q)
      Registro := Registro + 'P'; //14 - Código do segmento do registro detalhe
      Registro := Registro + ' '; //15 - Uso exclusivo FEBRABAN/CNAB: Branco
      case Titulos[NumeroRegistro].TipoOcorrencia of //16 a 17 - Código de movimento
         toRemessaRegistrar                 : Registro := Registro + '01';
         toRemessaBaixar                    : Registro := Registro + '02';
         toRemessaConcederAbatimento        : Registro := Registro + '04';
         toRemessaCancelarAbatimento        : Registro := Registro + '05';
         toRemessaConcederDesconto          : Registro := Registro + '07';
         toRemessaCancelarDesconto          : Registro := Registro + '08';
         toRemessaAlterarVencimento         : Registro := Registro + '06';
         toRemessaProtestar                 : Registro := Registro + '09';
         toRemessaCancelarInstrucaoProtesto : Registro := Registro + '10';
         toRemessaDispensarJuros            : Registro := Registro + '31';
         toRemessaAlterarNomeEnderecoSacado : Registro := Registro + '31';
      else
         Raise Exception.CreateFmt('Ocorrência inválida em remessa - Nosso número: %s / Seu número: %s',[Titulos[NumeroRegistro].NossoNumero,Titulos[NumeroRegistro].SeuNumero]);
      end; //case Titulos[NumeroRegistro].TipoOcorrencia
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.CodigoAgencia,4,false,'0'); //18 a 21 - Agência mantenedora da conta
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoAgencia,1,false,'0'); //22 -Dígito verificador da agência
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.CodigoCedente,9,false,'0'); //23 a 31 - Codigo do cedente
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.DigitoCodigoCedente,1,false,'0'); //32 - digito Codigo do cedente
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.NumeroConta,9,false,'0'); //33 a 41 - Número da conta corrente
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Cedente.ContaBancaria.DigitoConta,1,false,'0'); //42 - Dígito verificador da conta
      Registro := Registro + '  '; // 43 a 44 - brancos
      Registro := Registro + Formatar(Titulos[NumeroRegistro].NossoNumero,13,False,'0'); //45 a 57 - Nosso número - identificação do título no banco
      Registro := Registro + '1'; //58 - Código da Carteira
      Registro := Registro + '1'; //59 - Forma de cadastramento do título no banco: com cadastramento
      Registro := Registro + '1'; //60- Tipo de documento: Tradicional
      Registro := Registro + '  '; // 61 a 62 brancos
      Registro := Registro + Formatar(Titulos[NumeroRegistro].SeuNumero,15,True,' '); //63 a 77 - Número que identifica o título na empresa
      Registro := Registro + FormatDateTime('ddmmyyyy',Titulos[NumeroRegistro].DataVencimento); //78 a 85 - Data de vencimento do título
      Registro := Registro + FormatCurr('000000000000000',Titulos[NumeroRegistro].ValorDocumento * 100); //86 a 100 - Valor nominal do título
      Registro := Registro + Formatar('',5,false,'0'); //101 a 105 - Agência cobradora. Se ficar em branco, a caixa determina automaticamente pelo CEP do sacado
      Registro := Registro + ' '; //106 - Dígito da agência cobradora

      //*************** Especie do documento  *******************************
      case Titulos[NumeroRegistro].EspecieDocumento of {//107 a 108 - Espécie do documento
         edApoliceSeguro                : Registro := Registro + '20'; {AP  APÓLICE DE SEGURO}
         edCheque                       : Registro := Registro + '01'; {CH  CHEQUE}
         edDuplicataMercantil           : Registro := Registro + '02'; {DM  DUPLICATA MERCANTIL}
         edDuplicataMercantialIndicacao : Registro := Registro + '03'; {DMI DUPLICATA MERCANTIL P/ INDICAÇÃO}
         edDuplicataRural               : Registro := Registro + '06'; {DR  DUPLICATA RURAL}
         edDuplicataServico             : Registro := Registro + '04'; {DS  DUPLICATA DE SERVIÇO}
         edDuplicataServicoIndicacao    : Registro := Registro + '05'; {DSI DUPLICATA DE SERVIÇO P/ INDICAÇÃO}
         edFatura                       : Registro := Registro + '18'; {FAT FATURA}
         edLetraCambio                  : Registro := Registro + '07'; {LC  LETRA DE CÂMBIO}
         edMensalidadeEscolar           : Registro := Registro + '21'; {ME  MENSALIDADE ESCOLAR}
         edNotaCreditoComercial         : Registro := Registro + '08'; {NCC NOTA DE CRÉDITO COMERCIAL}
         edNotaCreditoExportacao        : Registro := Registro + '09'; {NCE NOTA DE CRÉDITO A EXPORTAÇÃO}
         edNotaCreditoIndustrial        : Registro := Registro + '10'; {NCI NOTA DE CRÉDITO INDUSTRIAL}
         edNotaCreditoRural             : Registro := Registro + '11'; {NCR NOTA DE CRÉDITO RURAL}
         edNotaDebito                   : Registro := Registro + '19'; {ND  NOTA DE DÉBITO}
         edNotaPromissoria              : Registro := Registro + '12'; {NP  NOTA PROMISSÓRIA}
         edNotaPromissoriaRural         : Registro := Registro + '13'; {NPR NOTA PROMISSÓRIA RURAL}
         edNotaSeguro                   : Registro := Registro + '16'; {NS  NOTA DE SEGURO}
         edParcelaConsorcio             : Registro := Registro + '22'; {PC  PARCELA DE CONSORCIO}
         edRecibo                       : Registro := Registro + '17'; {RC  RECIBO}
         edTriplicataMercantil          : Registro := Registro + '14'; {TM  TRIPLICATA MERCANTIL}
         edTriplicataServico            : Registro := Registro + '15' {TS  TRIPLICATA DE SERVIÇO}
      else
         Registro := Registro + '99'; {OUTROS}
      end; //case Titulos[NumeroRegistro].EspecieDocumento
      //*********************************************************************

      //**************Aceite Documento **************************************
      case Titulos[NumeroRegistro].AceiteDocumento of //109 - Identificação de título Aceito / Não aceito
         adSim : Registro := Registro + 'A';
         adNao : Registro := Registro + 'N';
      end; //case Titulos[NumeroRegistro].AceiteDocumento
      //*********************************************************************

      Registro := Registro + FormatDateTime('ddmmyyyy',Titulos[NumeroRegistro].DataDocumento); //110 a 117 - Data da emissão do documento

      //*************************  Mora Juros  ******************************
      if Titulos[NumeroRegistro].ValorMoraJuros > 0 then
      begin
         Registro := Registro + '1'; //118 - Código de juros de mora: Valor por dia
         if Titulos[NumeroRegistro].DataMoraJuros <> NULL then
            Registro := Registro + FormatDateTime('ddmmyyyy',Titulos[NumeroRegistro].DataMoraJuros) //119 a 126 - Data a partir da qual serão cobrados juros
         else
            Registro := Registro + Formatar('',8,false,'0'); //119 a 126 - Data a partir da qual serão cobrados juros
         Registro := Registro + FormatCurr('000000000000000',Titulos[NumeroRegistro].ValorMoraJuros * 100); //127 a 141 - Valor de juros de mora por dia
      end
      else
      begin
         Registro := Registro + '3'; //118 - Código de juros de mora  (não há juros)
         Registro := Registro + Formatar('',8,false,'0'); //119 a 126 - Data a partir da qual serão cobrados juros
         Registro := Registro + Formatar('',15,false,'0');//127 a 141 - Valor de juros de mora por dia
      end;
      //*******************  Descontos  *********************
      if Titulos[NumeroRegistro].ValorDesconto > 0 then
      begin
         Registro := Registro + '1'; //142 - Código de desconto: Valor fixo até a data informada
         if Titulos[NumeroRegistro].DataDesconto <> NULL then
            Registro := Registro + FormatDateTime('ddmmyyyy',Titulos[NumeroRegistro].DataDesconto) //143 a 150 - Data do desconto
         else
            Registro := Registro + Formatar('',8,false,'0'); //143 a 150 - Data até a qual será concedido desconto
         Registro := Registro + FormatCurr('000000000000000',Titulos[NumeroRegistro].ValorDesconto * 100); //151 a 165 - Valor do desconto por dia
      end
      else
      begin
         Registro := Registro + '0'; //142 - Código de desconto: Sem desconto
         Registro := Registro + Formatar('',8,false,'0'); //143 a 150 - Data até a qual será concedido desconto
         Registro := Registro + Formatar('',15,false,'0'); //151 a 165 - Valor do desconto por dia
      end;
      //*********************************************************************
      Registro := Registro + FormatCurr('000000000000000',Titulos[NumeroRegistro].ValorIOF * 100); //166 a 180 - Valor do IOF a ser recolhido
      Registro := Registro + FormatCurr('000000000000000',Titulos[NumeroRegistro].ValorAbatimento * 100); //181 a 195 - Valor do abatimento
      Registro := Registro + Formatar(Titulos[NumeroRegistro].SeuNumero,25); //196 a 220 - Identificação do título na empresa
      //**********************  Protesto  ***********************************
      if (Titulos[NumeroRegistro].DataProtesto <> null) and (Titulos[NumeroRegistro].DataProtesto > Titulos[NumeroRegistro].DataVencimento) then
      begin
         Registro := Registro + '1'; //221 - Código de protesto: Protestar em XX dias corridos
         Registro := Registro + Formatar(IntToStr(DaysBetween(Titulos[NumeroRegistro].DataProtesto, Titulos[NumeroRegistro].DataVencimento)),2,false,'0'); //221 - Prazo para protesto (em dias corridos)
      end
      else
      begin
         Registro := Registro + '0'; //221 - Código de protesto: Não protestar
         Registro := Registro + Formatar('',2,false,'0'); //222 a 223 - Prazo para protesto (em dias corridos)
      end;
      //**********************  Codigo p/ Baixa/Devolucao  ******************
      if (Titulos[NumeroRegistro].DataBaixa <> null) and (Titulos[NumeroRegistro].DataBaixa > Titulos[NumeroRegistro].DataVencimento) then
      begin
         Registro := Registro + '1'; //224 - Código para baixa/devolução: Baixar/devolver}
         Registro := Registro + Formatar(IntToStr(DaysBetween(Titulos[NumeroRegistro].DataBaixa,Titulos[NumeroRegistro].DataVencimento)),3,false,'0'); //225 a 227 - Prazo para baixa/devolução (em dias corridos)
      end
      else
      begin
         Registro := Registro + '2'; //224 - Código para baixa/devolução: Não baixar/não devolver
         Registro := Registro + Formatar('',3,false,'0'); //225 a 227 - Prazo para baixa/devolução (em dias corridos)
      end;
       //********************************************************************
      Registro := Registro + '00'; //228 a 229 - Código da moeda: Real
      Registro := Registro + Formatar('',11); //230 a 240 - Uso exclusivo FEBRABAN/CNAB

      Remessa.Add(Registro);
      Registro := '';

      {SEGMENTO Q}
      case Titulos[NumeroRegistro].Sacado.TipoInscricao of
        tiPessoaFisica  : ASacadoTipoInscricao := '1';
        tiPessoaJuridica: ASacadoTipoInscricao := '2';
        tiOutro         : ASacadoTipoInscricao := '9';
      end;

      Registro := Formatar(CodigoBanco,3,false,'0'); {Código do banco}
      Registro := Registro + Formatar(IntToStr(NumeroLote),4,false,'0'); {Número do lote}
      Registro := Registro + '3'; {Tipo do registro: Registro detalhe}
      Registro := Registro + Formatar(IntToStr(2*NumeroRegistro+2),5,false,'0'); {Número seqüencial do registro no lote - Cada título tem 2 registros (P e Q)}
      Registro := Registro + 'Q'; {Código do segmento do registro detalhe}
      Registro := Registro + ' '; {Uso exclusivo FEBRABAN/CNAB: Branco}
      case Titulos[NumeroRegistro].TipoOcorrencia of {Código de movimento}
         toRemessaRegistrar                 : Registro := Registro + '01';
         toRemessaBaixar                    : Registro := Registro + '02';
         toRemessaConcederAbatimento        : Registro := Registro + '04';
         toRemessaCancelarAbatimento        : Registro := Registro + '05';
         toRemessaConcederDesconto          : Registro := Registro + '07';
         toRemessaCancelarDesconto          : Registro := Registro + '08';
         toRemessaAlterarVencimento         : Registro := Registro + '06';
         toRemessaProtestar                 : Registro := Registro + '09';
         toRemessaCancelarInstrucaoProtesto : Registro := Registro + '10';
         toRemessaDispensarJuros            : Registro := Registro + '31';
         toRemessaAlterarNomeEnderecoSacado : Registro := Registro + '31';
      else
         Raise Exception.CreateFmt('Ocorrência inválida em remessa - Nosso número: %s / Seu número: %s',[Titulos[NumeroRegistro].NossoNumero,Titulos[NumeroRegistro].SeuNumero]);
      end; {case Titulos[NumeroRegistro].TipoOcorrencia}
      {Dados do sacado}
      Registro := Registro + Formatar(ASacadoTipoInscricao,1,false,'0');
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.NumeroCPFCGC,15,false,'0');
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Nome,40);
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Rua+' '+Titulos[NumeroRegistro].Sacado.Endereco.Numero+' '+Titulos[NumeroRegistro].Sacado.Endereco.Complemento,40);
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Bairro,15);
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.CEP,8,true,'0');
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Cidade,15,true);
      Registro := Registro + Formatar(Titulos[NumeroRegistro].Sacado.Endereco.Estado,2,false);
      {Dados do sacador/avalista}
      Registro := Registro + '0'; {Tipo de inscrição: Não informado}
      Registro := Registro + Formatar('',15,false,'0'); {Número de inscrição}
      Registro := Registro + Formatar('',40); {Nome do sacador/avalista}

      Registro := Registro + Formatar('000',3); {Uso exclusivo FEBRABAN/CNAB}
      Registro := Registro + Formatar('000',3); {Uso exclusivo FEBRABAN/CNAB}
      Registro := Registro + Formatar('000',3); {Uso exclusivo FEBRABAN/CNAB}
      Registro := Registro + Formatar('000',3); {Uso exclusivo FEBRABAN/CNAB}
      Registro := Registro + Formatar('',19); // brancos

      Remessa.Add(Registro);
      NumeroRegistro := NumeroRegistro + 1;
    end; {GERAR TODOS OS REGISTROS DETALHE DA REMESSA}

     {REGISTRO TRAILER DO LOTE}
    Registro := Formatar(CodigoBanco,3,false,'0'); {Código do banco}
    Registro := Registro + Formatar(IntToStr(NumeroLote),4,false,'0'); {Número do lote}
    Registro := Registro + '5'; {Tipo do registro: Registro trailer do lote}
    Registro := Registro + Formatar('',9); {Uso exclusivo FEBRABAN/CNAB}
    {Quantidade de registros do lote, incluindo header e trailer do lote.
     Até este momento Remessa contém:
     1 registro header de arquivo - É preciso excluí-lo desta contagem
     1 registro header de lote
     Diversos registros detalhe
     Falta incluir 1 registro trailer de lote
     Ou seja Quantidade = Remessa.Count - 1 header de arquivo + 1 trailer de lote = Remessa.Count}
    Registro := Registro + Formatar(IntToStr(Remessa.Count),6,false,'0');
    {Uso exclusivo FEBRABAN/CNAB}
    Registro := Registro + Formatar('',217); {Uso exclusivo FEBRABAN/CNAB}

    Remessa.Add(Registro);
    Registro := '';

    {GERAR REGISTRO TRAILER DO ARQUIVO}
    Registro := Formatar(CodigoBanco,3,false,'0'); {Código do banco}
    Registro := Registro + '9999'; {Lote de serviço}
    Registro := Registro + '9'; {Tipo do registro: Registro trailer do arquivo}
    Registro := Registro + Formatar('',9); {Uso exclusivo FEBRABAN/CNAB}
    Registro := Registro + Formatar(IntToStr(NumeroLote),6,false,'0'); {Quantidade de lotes do arquivo}
    Registro := Registro + Formatar(IntToStr(Remessa.Count + 1),6,false,'0'); {Quantidade de registros do arquivo, inclusive este registro que está sendo criado agora}
    Registro := Registro + Formatar('',211); {Uso exclusivo FEBRABAN/CNAB}

    Remessa.Add(Registro);

    Result := TRUE;

  End;
end;

function TRLBanco033.LerRetornoCNAB240(var ACobranca: TRLBRemessa; Retorno: TStringList): boolean;
var
  ACodigoBanco,
  ANomeCedente,
  ATipoInscricao,
  ANumeroCPFCGC,
  ACodigoCedente,
  ACodigoAgencia,
  ADigitoCodigoAgencia,
  ANumeroConta,
  ADigitoNumeroConta,
  ATipoOcorrencia : string;
  NumeroRegistro : integer;
  ATitulo : TRLBTitulo;
begin
  NumeroRegistro := 0;
  ATitulo := TRLBTitulo.Create(nil);
  TRY
    with ACobranca do
    begin
       Titulos.Clear; {Zera o conjunto de títulos, antes de incluir os títulos do arquivo retorno}

       if Retorno.Count <= 0 then
          Raise Exception.Create('O retorno está vazio. Não há dados para processar');

       if length(Retorno[0]) <> 240 then
       begin
          LayoutArquivo := laOutro;
          Raise Exception.CreateFmt('Tamanho de registro diferente de 240 bytes. Tamanho = %d bytes',[length(Retorno[0])]);
       end;

       LayoutArquivo := laCNAB240;

       {Ver se o arquivo é mesmo RETORNO DE COBRANÇA}
       if Copy(Retorno.Strings[NumeroRegistro],143,1) <> '2' then
          Raise Exception.Create(NomeArquivo+' não é um arquivo de retorno de cobrança com layout CNAB240');

       { Lê registro HEADER}
       ACodigoBanco := Copy(Retorno.Strings[NumeroRegistro],1,3);
       if ACodigoBanco <> CodigoBanco then
          Raise Exception.CreateFmt('Este não é um retorno de cobrança do banco %s - %s',[CodigoBanco,NomeBanco]);

       if Copy(Retorno.Strings[NumeroRegistro],8,1) <> '0' then
          Raise Exception.Create('Este não é um registro HEADER válido para arquivo de retorno de cobrança com layout CNAB240');

       {Dados do cedente do título}
       ATipoInscricao := Copy(Retorno.Strings[NumeroRegistro],17,1);
       ANumeroCPFCGC := Copy(Retorno.Strings[NumeroRegistro],18,15);
       //ACodigoCedente := Copy(Retorno.Strings[NumeroRegistro],33,16);
       ACodigoAgencia := Copy(Retorno.Strings[NumeroRegistro],33,4);
       ADigitoCodigoAgencia := Copy(Retorno.Strings[NumeroRegistro],37,1);
       ANumeroConta := Copy(Retorno.Strings[NumeroRegistro],38,9);
       ADigitoNumeroConta := Copy(Retorno.Strings[NumeroRegistro],47,1);
       ANomeCedente := Trim(Copy(Retorno.Strings[NumeroRegistro],73,30));

       DataArquivo := EncodeDate(StrToInt(Copy(Retorno.Strings[NumeroRegistro],148,4)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],146,2)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],144,2)));
       NumeroArquivo := StrToInt(Trim(Copy(Retorno.Strings[NumeroRegistro],158,6)));

       NumeroRegistro := 1;

       {Lê registro HEADER DE LOTE}
       {Verifica se é um lote de retorno de cobrança}
       if Copy(Retorno.Strings[NumeroRegistro],9,3) <> 'T01' then
          Raise Exception.Create('Este não é um lote de retorno de cobrança');

       {Lê os registros DETALHE}
       NumeroRegistro := NumeroRegistro + 1;
       {Lê até o antepenúltimo registro porque o penúltimo contém apenas o TRAILER DO LOTE e o último contém apenas o TRAILER DO ARQUIVO}
       while (NumeroRegistro < Retorno.Count - 2) do
       begin
          {Registro detalhe com tipo de segmento = T}
          if Copy(Retorno.Strings[NumeroRegistro],14,1) = 'T' then
          begin
             {Dados do titulo}
             with ATitulo do
             begin
                {Tipo de ocorrência}
                ATipoOcorrencia := Copy(Retorno.Strings[NumeroRegistro],16,2);
                OcorrenciaOriginal := ATipoOcorrencia;
                DescricaoOcorrenciaOriginal := VerificaOcorrenciaOriginal(OcorrenciaOriginal, LayoutArquivo);
                case StrToInt(ATipoOcorrencia) of
                   2 : TipoOcorrencia := toRetornoRegistroConfirmado;
                   3 : TipoOcorrencia := toRetornoRegistroRecusado;
                   6 : TipoOcorrencia := toRetornoLiquidado;
                   9 : TipoOcorrencia := toRetornoBaixado;
                   12: TipoOcorrencia := toRetornoRecebimentoInstrucaoConcederAbatimento;
                   13: TipoOcorrencia := toRetornoRecebimentoInstrucaoCancelarAbatimento;
                   14: TipoOcorrencia := toRetornoRecebimentoInstrucaoAlterarVencimento;
                   17: TipoOcorrencia := toRetornoLiquidado;
                   19: TipoOcorrencia := toRetornoRecebimentoInstrucaoProtestar;
                   20: TipoOcorrencia := toRetornoRecebimentoInstrucaoSustarProtesto;
                   23: TipoOcorrencia := toRetornoEncaminhadoACartorio;
                   24: TipoOcorrencia := toRetornoRetiradoDeCartorio;
                   25: TipoOcorrencia := toRetornoProtestado;
                   26: TipoOcorrencia := toRetornoComandoRecusado;
                   27: TipoOcorrencia := toRetornoRecebimentoInstrucaoAlterarDados;
                   28: TipoOcorrencia := toRetornoDebitoTarifas;
                   30: TipoOcorrencia := toRetornoRegistroRecusado;
                   36: TipoOcorrencia := toRetornoRecebimentoInstrucaoConcederDesconto;
                   37: TipoOcorrencia := toRetornoRecebimentoInstrucaoCancelarDesconto;
                   43: TipoOcorrencia := toRetornoProtestoOuSustacaoEstornado;
                   44: TipoOcorrencia := toRetornoBaixaOuLiquidacaoEstornada;
                   45: TipoOcorrencia := toRetornoDadosAlterados;
                else
                   TipoOcorrencia := toRetornoOutrasOcorrencias;
                end; {case StrToInt(ATipoOcorrencia)}

                {Nosso número SEM DÍGITO}
                NossoNumero := Copy(Retorno.Strings[NumeroRegistro],41,12);
                SeuNumero := Trim(Copy(Retorno.Strings[NumeroRegistro],55,15));
                if Copy(Retorno.Strings[NumeroRegistro],70,8)<>'00000000' then
                   DataVencimento := EncodeDate(StrToInt(Copy(Retorno.Strings[NumeroRegistro],74,4)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],72,2)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],70,2)));
                ValorDocumento := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],78,15))/100;

                {Dados do cedente do título}
                with Cedente do
                begin
                   if ATipoInscricao = '1' then
                      TipoInscricao := tiPessoaFisica
                   else if ATipoInscricao = '2' then
                      TipoInscricao := tiPessoaJuridica
                   else
                      TipoInscricao := tiOutro;
                   NumeroCPFCGC := ANumeroCPFCGC;
                   CodigoCedente := ACodigoCedente;
                   with ContaBancaria do
                   begin
                      Banco.Codigo := ACodigoBanco;
                      CodigoAgencia := ACodigoAgencia;
                      DigitoAgencia := ADigitoCodigoAgencia;
                      NumeroConta := ANumeroConta;
                      DigitoConta := ADigitoNumeroConta;
                   end;
                   Nome := ANomeCedente;
                end; {with ACedente}

                {Dados do sacado do título}
                with Sacado do
                begin
                   if Copy(Retorno.Strings[NumeroRegistro],128,1) = '1' then
                      TipoInscricao := tiPessoaFisica
                   else if Copy(Retorno.Strings[NumeroRegistro],128,1) = '2' then
                      TipoInscricao := tiPessoaJuridica
                   else
                      TipoInscricao := tiOutro;
                   NumeroCPFCGC := Copy(Retorno.Strings[NumeroRegistro],129,15);
                   Nome := Trim(Copy(Retorno.Strings[NumeroRegistro],144,40));
                end; {with ACedente}

                ValorDespesaCobranca := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],194,15))/100;
                MotivoRejeicaoComando := Trim(Copy(Retorno.Strings[NumeroRegistro],209,10));
                DescricaoMotivoRejeicaoComando := VerificaMotivoRejeicaoComando(OcorrenciaOriginal, MotivoRejeicaoComando, LayoutArquivo);
             end; {with ATitulo}

             NumeroRegistro := NumeroRegistro + 1;
          end; {if Copy(Retorno.Strings[NumeroRegistro],14,1) = 'T'}

          {Registro detalhe com tipo de segmento = U}
          if Copy(Retorno.Strings[NumeroRegistro],14,1) = 'U' then
          begin
             with ATitulo do
             begin
                ValorMoraJuros := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],18,15))/100;
                ValorDesconto := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],33,15))/100;
                ValorAbatimento := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],48,15))/100;
                ValorIOF := StrToFloat(Copy(Retorno.Strings[NumeroRegistro],63,15))/100;
                ValorOutrasDespesas := StrToFloat(Trim(Copy(Retorno.Strings[NumeroRegistro],108,15)))/100;
                ValorOutrosCreditos := StrToFloat(Trim(Copy(Retorno.Strings[NumeroRegistro],123,15)))/100;
                DataOcorrencia:= EncodeDate(StrToInt(Copy(Retorno.Strings[NumeroRegistro],142,4)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],140,2)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],138,2)));

                if TipoOcorrencia = toRetornoLiquidado then
                Begin
                   DataCredito := EncodeDate(StrToInt(Copy(Retorno.Strings[NumeroRegistro],150,4)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],148,2)),StrToInt(Copy(Retorno.Strings[NumeroRegistro],146,2)));
                   DataBaixa   := DataCredito;
                End;
             end; {with ATitulo}

             NumeroRegistro := NumeroRegistro + 1;
          end; {if Copy(Retorno.Strings[NumeroRegistro],14,1) = 'U'}

          {Insere o título}
          Titulos.Add(ATitulo);
       end;
     end;

    ATitulo.Free;
    Result := TRUE
  EXCEPT
    ATitulo.Free;
    Result := FALSE;
    Raise; {Propaga o erro}
  END;
end;

function TRLBanco033.VerificaMotivoRejeicaoComando(sOcorrenciaOriginal, sMotivoRejeicaoComando: String; sLayoutArquivo: TLayoutArquivo): String;
begin
     if (sMotivoRejeicaoComando = '  ') or (sMotivoRejeicaoComando = '00') then begin
      Result:='';
      Exit;
   end;

   case sLayoutArquivo of
      laCNAB240: begin
         if (sOcorrenciaOriginal = '02') or (sOcorrenciaOriginal = '03') or (sOcorrenciaOriginal = '26') or (sOcorrenciaOriginal = '30') then begin
            case StrToInt(sMotivoRejeicaoComando) of
               01: Result:='01-Código do banco inválido' ;
               02: Result:='02-Código do registro detalhe inválido' ;
               03: Result:='03-Código do segmento inválido' ;
               04: Result:='04-Código de movimento não permitido para carteira' ;
               05: Result:='05-Código de movimento inválido' ;
               06: Result:='06-Tipo/Número de inscrição do cedente inválidos' ;
               07: Result:='07-Agência/Conta/DV inválido' ;
               08: Result:='08-Nosso número inválido' ;
               09: Result:='09-Nosso número duplicado' ;
               10: Result:='10-Carteira inválida' ;
               11: Result:='11-Forma de cadastramento do título inválido' ;
               12: Result:='12-Tipo de documento inválido' ;
               13: Result:='13-Identificação da emissão do bloqueto inválida' ;
               14: Result:='14-Identificação da distribuição do bloqueto inválida' ;
               15: Result:='15-Características da cobrança incompatíveis' ;
               16: Result:='16-Data de vencimento inválida' ;
               17: Result:='17-Data de vencimento anterior a data de emissão' ;
               18: Result:='18-Vencimento fora do prazo de operação' ;
               19: Result:='19-Títulos a cargo de bancos correspondendtes com vencimento inferiror a XX dias' ;
               20: Result:='20-Valor do título inválido' ;
               21: Result:='21-Espécie do título inválida' ;
               22: Result:='22-Espécie do título não permitida para a carteira' ;
               23: Result:='23-Aceite inválido' ;
               24: Result:='24-Data da emissão inválida' ;
               25: Result:='25-Data da emissão posterior a data de entrada' ;
               26: Result:='26-Código de juros de mora inválido' ;
               27: Result:='27-Valor/Taxa de juros de mora inválido' ;
               28: Result:='28-Código do desconto inválido' ;
               29: Result:='29-Valor do desconto maior ou igual ao valor do título' ;
               30: Result:='30-Desconto a conceder não confere' ;
               31: Result:='31-Concessão de desconto - Já existe desconto anterior' ;
               32: Result:='32-Valor do IOF iválido' ;
               33: Result:='33-Valor do abatimento inválido' ;
               34: Result:='34-Valor do abatimento maior ou igual ao valor do título' ;
               35: Result:='35-Valor a conceder não confere' ;
               36: Result:='36-Concessão de abatimento - Já existe abatimento anterior' ;
               37: Result:='37-Código para protesto inválido' ;
               38: Result:='38-Prazo para protesto inválido' ;
               39: Result:='39-Pedido de protesto não permitido para o título' ;
               40: Result:='40-Título com ordem de protesto emitida' ;
               41: Result:='41-Pedido de cancelamento/sustação para títulos sem instrução de protesto' ;
               42: Result:='42-Código para Baixa/Devolução Inválido' ;
               43: Result:='43-Prazo para baixa/devolução inválido' ;
               44: Result:='44-Código da moeda inválido' ;
               45: Result:='45-Nome do sacado não informado' ;
               46: Result:='46-Tipo/Número de inscrição do sacado inválidos' ;
               47: Result:='47-Endereco do sacado não informado' ;
               48: Result:='48-CEP inválido' ;
               49: Result:='49-CEP sem praça de cobrança (não localizado)' ;
               50: Result:='50-CEP referente a um banco correspondente' ;
               51: Result:='51-CEP incompatível com a Unidade da Federação' ;
               52: Result:='52-Unidade da Federação inválida' ;
               53: Result:='53-Tipo/Número de inscrição do Sacador/Avalista inválido' ;
               54: Result:='54-Sacador/Avalista não informado' ;
               55: Result:='55-Nosso número no banco correspondente não informado' ;
               56: Result:='56-Código do banco correspondente não informado' ;
               57: Result:='57-Código da multa inválido' ;
               58: Result:='58-Data da multa inválida' ;
               59: Result:='59-Valor/Percentual da multa inválido' ;
               60: Result:='60-Movimento para título não cadastrado' ;
               61: Result:='61-Alteração da agência cobradora/DV inválida' ;
               62: Result:='62-Tipo de emissão inválido' ;
               63: Result:='63-Entrada para título já cadastrada' ;
               64: Result:='64-Número da linha inválido' ;
               65: Result:='65-Código do banco para débido inválido' ;
               66: Result:='66-Agência/Conta/DV para débito inválido' ;
               67: Result:='67-Dados para débito incompatível com a identificação da emissão do bloqueto' ;
               68: Result:='68-Débito automático agendado';
               69: Result:='69-Débito não agendado - Erro nos dados da remessa';
               70: Result:='70-Débito não agendado - Sacado não consta do cadastro de autorizante';
               71: Result:='71-Débito não agendado - Cedente não autorizado pelo sacado';
               72: Result:='72-Débito não agendado - Cedente não participa da modalidade débito automático';
               73: Result:='73-Débito não agendado - Código de moeda diferente de Real (R$)';
               74: Result:='74-Débito não agendado - Data de vencimento inválida';
               75: Result:='75-Débito não agendado, conforme seu pedido, titulo não registrado';
               76: Result:='76-Débito não agendado, Tipo/Número da inscrição do debitado, inválido';
               77: Result:='77-Transferencia para desconto não permitida para carteira do título';
               78: Result:='78-Data inferior ou igual ao vencimento para débito automático';
               79: Result:='79-Data juros de mora inválida';
               80: Result:='80-Data do desconto Inválida' ;
               81: Result:='81-Tentativas de débito esgotadas - Baixado' ;
               82: Result:='82-Tentativas de débito esgotadas - Pendente' ;
               83: Result:='83-Limite excedido' ;
               84: Result:='84-Número autorização inexistente' ;
               85: Result:='85-Título com pagamento vinculado';
               86: Result:='86-Seu número inválido' ;
               88: Result:='88-Arquivo em duplicidade' ;
               99: Result:='99-Contrato inexistente' ;
            end;
         end;
         if (sOcorrenciaOriginal = '28') then begin
            case StrToInt(sMotivoRejeicaoComando) of
               01: Result:='01-Tarifa de extrato de posição' ;
               02: Result:='02-Tarifa de manutençaõ de título vencido' ;
               03: Result:='03-Tarifa de sustação' ;
               04: Result:='04-Tarifa de Protesto' ;
               05: Result:='05-Tarifa de outras insturções' ;
               06: Result:='06-Tarifa de outras ocorrencias' ;
               07: Result:='07-Tarifa de envio de duplicata ao sacado' ;
               08: Result:='08-Custas de protesto' ;
               09: Result:='09-Custas de sustação de protestos' ;
               10: Result:='10-Custas de cartório distribuidor' ;
               11: Result:='11-Custas de edital' ;
               12: Result:='12-Tarifa sobre devolução de título vencido' ;
               13: Result:='13-Tarifa sobre registro cobrada na baixa/liquidação' ;
               14: Result:='14-Tarifa sobre reapresentação automática' ;
               15: Result:='15-Tarifa sobre rateio de crédito' ;
               16: Result:='16-Tarifa sobre informações via fax' ;
               17: Result:='17-Tarifa sobre prorrogação de vencimento' ;
               18: Result:='18-Tarifa sobre alteração de abatimento/desconto' ;
               19: Result:='19-Tarifa sobre arquivo mensal (em ser)' ;
               20: Result:='20-Tarifa de emissão de bloquto pré-emitido pelo banco' ;
            end;
         end;
         if (sOcorrenciaOriginal = '06') or (sOcorrenciaOriginal = '09') or (sOcorrenciaOriginal = '17') then begin
            case StrToInt(sMotivoRejeicaoComando) of
               01: Result:='01-Por saldo' ;
               02: Result:='02-Por Conta' ;
               03: Result:='03-No próprio banco' ;
               04: Result:='04-Compensação eletônica' ;
               05: Result:='05-Compensação convencional' ;
               06: Result:='06-Por meio eletônico' ;
               07: Result:='07-Após feriado local' ;
               08: Result:='08-Em cartório' ;
               09: Result:='09-Comandada banco' ;
               10: Result:='10-Comandada cliente arquivo' ;
               11: Result:='11-Comandada cliente on-line' ;
               12: Result:='12-Decurso prazo - Cliente' ;
               13: Result:='13-Decurso prazo - Banco' ;
               14: Result:='14-Protestado' ;
               15: Result:='15-Título excluído' ;
            end;
         end;
      end;
      laCNAB400: begin
         case StrToInt(sMotivoRejeicaoComando) of
            01: Result:='01-Identificação inválida' ;
            02: Result:='02-Variação da carteira inválida' ;
            03: Result:='03-Valor dos juros por um dia inválido' ;
            04: Result:='04-Valor do desconto inválido' ;
            05: Result:='05-Espécie de título inválida para carteira' ;
            06: Result:='06-Espécie de valor variável inválido' ;
            07: Result:='07-Prefixo da agência usuária inválido' ;
            08: Result:='08-Valor do título/apólice inválido' ;
            09: Result:='09-Data de vencimento inválida' ;
            10: Result:='10-Fora do prazo' ;
            11: Result:='11-Inexistência de margem para desconto' ;
            12: Result:='12-O Banco não tem agência na praça do sacado' ;
            13: Result:='13-Razões cadastrais' ;
            14: Result:='14-Sacado interligado com o sacador' ;
            15: Result:='15-Título sacado contra orgão do Poder Público' ;
            16: Result:='16-Título preenchido de forma irregular' ;
            17: Result:='17-Título rasurado' ;
            18: Result:='18-Endereço do sacado não localizado ou incompleto' ;
            19: Result:='19-Código do cedente inválido' ;
            20: Result:='20-Nome/endereco do cliente não informado /ECT/' ;
            21: Result:='21-Carteira inválida' ;
            22: Result:='22Quantidade de valor variável inválida' ;
            23: Result:='23-Faixa nosso número excedida' ;
            24: Result:='24-Valor do abatimento inválido' ;
            25: Result:='25-Novo número do título dado pelo cedente inválido' ;
            26: Result:='26-Valor do IOF de seguro inválido' ;
            27: Result:='27-Nome do sacado/cedente inválido ou não informado' ;
            28: Result:='28-Data do novo vencimento inválida' ;
            29: Result:='29-Endereco não informado' ;
            30: Result:='30-Registro de título já liquidado' ;
            31: Result:='31-Numero do bordero inválido' ;
            32: Result:='32-Nome da pessoa autorizada inválido' ;
            33: Result:='33-Nosso número já existente' ;
            34: Result:='34-Numero da prestação do contrato inválido' ;
            35: Result:='35-Percentual de desconto inválido' ;
            36: Result:='36-Dias para fichamento de protesto inválido' ;
            37: Result:='37-Data de emissão do título inválida' ;
            38: Result:='38-Data do vencimento anterior a data da emissão do título' ;
            39: Result:='39-Comando de alteração indevido para a carteira' ;
            40: Result:='40-Tipo de moeda inválido' ;
            41: Result:='41-Abatimento não permitido' ;
            42: Result:='42-CEP do sacado inválido /ECT/' ;
            43: Result:='43-Codigo de unidade variavel incompativel com a data emissão do título' ;
            44: Result:='44-Dados para debito ao sacado inválidos' ;
            45: Result:='45-Carteira' ;
            46: Result:='46-Convenio encerrado' ;
            47: Result:='47-Título tem valor diverso do informado' ;
            48: Result:='48-Motivo de baixa inválido para a carteira' ;
            49: Result:='49-Abatimento a cancelar não consta do título' ;
            50: Result:='50-Comando incompativel com a carteira' ;
            51: Result:='51-Codigo do convenente inválido' ;
            52: Result:='52-Abatimento igual ou maior que o valor do título' ;
            53: Result:='53-Título já se encontra situação pretendida' ;
            54: Result:='54-Título fora do prazo admitido para a conta 1' ;
            55: Result:='55-Novo vencimento fora dos limites da carteira' ;
            56: Result:='56-Título não pertence ao convenente' ;
            57: Result:='57-Variação incompativel com a carteira' ;
            58: Result:='58-Impossivel a transferencia para a carteira indicada' ;
            59: Result:='59-Título vencido em transferencia para a carteira 51' ;
            60: Result:='60-Título com prazo superior a 179 dias em transferencia para carteira 51' ;
            61: Result:='61-Título já foi fichado para protesto' ;
            62: Result:='62-Alteração da situação de debito inválida para o codigo de responsabilidade' ;
            63: Result:='63-DV do nosso número inválido' ;
            64: Result:='64-Título não passivel de debito/baixa - situação anormal' ;
            65: Result:='65-Título com ordem de não protestar-não pode ser encaminhado a cartorio' ;
            67: Result:='66-Título/carne rejeitado' ;
            80: Result:='80-Nosso número inválido' ;
            81: Result:='81-Data para concessão do desconto inválida' ;
            82: Result:='82-CEP do sacado inválido' ;
            83: Result:='83-Carteira/variação não localizada no cedente' ;
            84: Result:='84-Título não localizado na existencia' ;
            99: Result:='99-Outros motivos' ;
         end;
      end;
   end;
end;

function TRLBanco033.VerificaOcorrenciaOriginal(sOcorrenciaOriginal: String; aLayoutArquivo: TLayoutArquivo): String;
begin
     if sOcorrenciaOriginal='  ' then begin
      Result:='';
      Exit;
   end;
   case aLayoutArquivo of
      laCNAB240 : begin
         case StrToInt(sOcorrenciaOriginal) of
            02: Result:='02-Entrada confirmada' ;
            03: Result:='03-Entrada rejeitada' ;
            04: Result:='04-Transferencia de carteira/entrada' ;
            05: Result:='05-Transferencia de carteira/baixa' ;
            06: Result:='06-Liquidação' ;
            09: Result:='09-Baixa' ;
            11: Result:='11-Titulos em carteira /em ser/' ;
            12: Result:='12-Confirmação recebimento instrução de abatimento' ;
            13: Result:='13-Confirmação recebimento instrução de cancelamento abatimento' ;
            14: Result:='14-Confirmação recebimento instrução alteração de vencimento' ;
            15: Result:='15-Franco de pagamento' ;
            17: Result:='17-Liquidação após baixa ou liquidação título não registrado';
            19: Result:='19-Confirmação de recebimento de instruções para protesto' ;
            20: Result:='20-Confirmação recebimento instrução de sustção/cancelamento de protesto' ;
            23: Result:='23-Remessa a cartorio' ;
            24: Result:='24-Retirada de cartorio e manutenção em carteira' ;
            25: Result:='25-Protestado e baixado /baixa por ter sido protestado/' ;
            26: Result:='26-Instrução rejeitada';
            27: Result:='27-Confirmação do pedido de alteração de outros dados' ;
            28: Result:='28-Manutenção de tarifas/custas' ;
            29: Result:='29-Ocorrencias do sacado' ;
            30: Result:='30-Alteração de dados rejeitada' ;
         end;
      end;
      laCNAB400 : begin
         case StrToInt(sOcorrenciaOriginal) of
            02: Result:='02-Confirmação de Entrada de Título' ;
            03: Result:='03-Comando recusado' ;
            05: Result:='05-Liquidado sem registro' ;
            06: Result:='06-Liquidação Normal' ;
            07: Result:='07-Liquidação por Conta' ;
            08: Result:='08-Liquidação por Saldo' ;
            09: Result:='09-Baixa de Título' ;
            10: Result:='10-Baixa Solicitada' ;
            11: Result:='11-Titulos em Ser' ;
            12: Result:='12-Abatimento Concedido' ;
            13: Result:='13-Abatimento Cancelado' ;
            14: Result:='14-Alteração de Vencimento do Titulo' ;
            15: Result:='15-Liquidação em Cartório' ;
            19: Result:='19-Confirmação de recebimento de instruções para protesto' ;
            20: Result:='20-Débito em Conta' ;
            21: Result:='21-Alteração do Nome do Sacado' ;
            22: Result:='22-Alteração do Endereço do Sacado' ;
            23: Result:='23-Indicação de encaminhamento a cartório' ;
            24: Result:='24-Sustar Protesto' ;
            25: Result:='25-Dispensar Juros' ;
            28: Result:='28-Manutenção de titulo vencido' ;
            72: Result:='72-Alteração de tipo de cobrança' ;
            96: Result:='96-Despesas de Protesto' ;
            97: Result:='97-Despesas de Sustação de Protesto' ;
            98: Result:='98-Débito de Custas Antecipadas' ;
         end;
      end;
   end;
end;

initialization
  RegisterClass(TRLBanco033);

{$HINTS ON}
{$WARNINGS ON}

end.
